package tab

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/settings"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/go-utils/utils/utils_types"
	"strings"
	"context"
)

templ Heading(shared *types.SharedData) {
	<style>
		.heading {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			min-height: 30px;
		}
		.right {
			margin: 10px;
			display: flex;
			flex-direction: column;
		}
		.left {
			align-self: stretch;
			flex-grow: 1;
		}
		#time, #patch {
			color: var(--color_time);
			font-size: 0.8em;
			align-self: flex-end;
		}
		#heading_string {
			align-self: flex-end;
		}
	</style>
	<div class="heading">
		<div class="left">
			{ children... }
		</div>
		<div class="right">
			if shared.ShowDisco {
				<div id="patch">
					Patch: <a style="color:var(--color_time);" href="https://patch.discoverygc.com/patchlist.xml">{ shared.LatestPatch.Name }</a>
				</div>
			}
			<div id="time">
				Darkstat { settings.Env.AppVersion } refreshed at { types.GetCtx(ctx).Timestamp.Format("02 Jan 2006 15:04:05") } UTC
			</div>
			<div id="heading_string">
				@templ.Raw(types.GetCtx(ctx).Heading)
			</div>
		</div>
	</div>
}

templ TabStyle() {
	<style>
	.tab-list {
		height: 100%;
		display: flex;
    	flex-wrap: wrap;
    	flex-direction: row;
		align-content: stretch;
	}
	.tab-list .selected {
		background-color: var(--selected);
	}
	.tab-list a {
		min-width: 45px;
		max-width: 75px;
		flex-grow: 1;
		flex-basis:45px;
	}
	.tab-list button {
		font-size: 0.90em;
		background-color: var(--color_background);
		color: var(--color_text);
		border-color: var(--color_border);

		min-width: 45px;
		max-width: 75px;
		flex-grow: 1;
		cursor: pointer;
		min-height: 36px;
		flex-basis:45px;
	}
	.tab-list button:hover {
		background-color: var(--color_hover);
	}

	button.Docs {
  		border-radius: 25px;
	}
	</style>
}

script GoToUrl(current string, themes []string) {
	let index = 0; 

	for (let i=0, item; item = themes[i]; i++) {
	// Look no need to do list[i] in the body of the loop
		console.log("Looping: index ", i, "item" + item);
		if (location.pathname == item) {
			index = i;
		}
	}

	index = index + 1;
	if (index > themes.length -1) {
		index = 0;
	}

	location.href=themes[index];

	// if (location.pathname == current) {
	// 	location.href=opposite;
	// } else {
	// 	location.href=current;
	// }
	
}

type Buttn struct {
	ctx context.Context
	text []string
	get_url utils_types.FilePath
	url utils_types.FilePath

	is_relay bool
	extra_style string
	attrs templ.Attributes
}
type ButtnOpt func(s *Buttn) 

func WithRelay() ButtnOpt{
	return func(s *Buttn) {
		s.is_relay = true
	}
}
func WithStyle(style string) ButtnOpt{
	return func(s *Buttn) {
		s.extra_style = style
	}
}

func NewButtn(
	ctx context.Context,
	text []string,
	get_url utils_types.FilePath,
	url utils_types.FilePath,
	opts ...ButtnOpt,
	) *Buttn {
	button := &Buttn{
		ctx:ctx,
		text: text,
		get_url: get_url,
		url: url,
	}

	for _, opt := range opts {
		opt(button)
	}

	button.attrs = make(templ.Attributes)
	var sb strings.Builder
	if button.get_url == urls.Swagger {
		sb.WriteString("width:100%; border-radius: 20px; height: 100%; ")
	}

	if button.get_url == urls.Thrusters ||
		button.get_url == urls.Scanners ||
		button.get_url == urls.Missiles ||
		button.get_url == urls.Factions ||
		button.get_url == urls.Missions ||
		button.get_url == urls.IDRephacks {
		sb.WriteString("flex-grow: 2; ")
	}

	sb.WriteString(button.extra_style)
	button.attrs["style"] =sb.String()

	return button
}

func (opt *Buttn) HxGet() string {
	if opt.is_relay {
		return types.GetCtx(opt.ctx).RelayHost + types.GetCtx(opt.ctx).RelayRoot + opt.get_url.ToString()
	} 

	return types.GetCtx(opt.ctx).SiteRoot + opt.get_url.ToString()
}

templ Button(opt *Buttn) {
	if opt.get_url == urls.Swagger {
		<a 
			href={ templ.SafeURL(types.GetCtx(ctx).SiteUrl + "/" + opt.get_url.ToString()) }
			style="display: block;"
		>
			<button
				class={ templ.KV("selected", strings.Contains(opt.get_url.ToString(), opt.url.ToString())), "button", strings.Join(opt.text,"") }
				role="tab"
				aria-selected="false"
				aria-controls="tab-content"
				{ opt.attrs... }
			>
				@frmt.MultiLinestringWrap(opt.text)
			</button>
		</a>

	// TODO refactor this hackery
	} else {
		<button
			preload="mouseover"
			hx-trigger="mousedown"
			hx-get={ opt.HxGet() }
			class={ templ.KV("selected", strings.Contains(opt.get_url.ToString(), opt.url.ToString())), "button", strings.Join(opt.text,"") }
			role="tab"
			aria-selected="false"
			aria-controls="tab-content"
			{ opt.attrs... }
		>
			@frmt.MultiLinestringWrap(opt.text)
		</button>
	}
}

func AllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return "all_" + url
}
func NotAllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return utils_types.FilePath(strings.ReplaceAll(url.ToString(), "all_", ""))
}
